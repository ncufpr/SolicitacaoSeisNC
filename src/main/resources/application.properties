spring.application.name=SolicitacaoSeis

# Configuração do Banco de Dados Banco Teste
#spring.datasource.url=jdbc:oracle:thin:@localhost:1522:XE
#spring.datasource.username=c##seis_dev
#spring.datasource.password=794613
#spring.datasource.driver-class-name=oracle.jdbc.OracleDriver


spring.datasource.url=jdbc:oracle:thin:@200.17.227.5:1521:nemesis.intranet.nc.ufpr.br
spring.datasource.username=SEIS
spring.datasource.password=SMITHS
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.jpa.hibernate.ddl-auto=none

server.servlet.contextPath=/SolicitacaoSeis

# Chave secreta (mínimo 256 bits)
jwt.secret=MinhaChaveSecretaSuperForteComPeloMenos32Caracteres12345
# Tempo de expiração (1 hora)
jwt.expiration=3600000



# 1. Limites de Conexões

# Define o número mínimo de conexões ociosas que o pool tentará manter.
# Isso ajuda a responder rapidamente a picos de demanda, pois as conexões já estarão prontas.
spring.datasource.hikari.minimum-idle=1

# Define o número máximo de conexões ativas que o pool pode manter.
spring.datasource.hikari.maximum-pool-size=10

# 2. Mecanismo para Invalidar Conexões "Mortas" (Zumbis)

# Tempo máximo (em milissegundos) que uma conexão pode permanecer ociosa no pool.
# Após esse tempo, ela pode ser removida se o número de conexões for maior que 'minimum-idle'.
# Valor recomendado: 10 minutos (600000 ms).
spring.datasource.hikari.idle-timeout=600000

# Tempo máximo (em milissegundos) que uma conexão pode permanecer "viva" no pool.
# Após esse tempo, ela será aposentada e substituída por uma nova. Ajuda a prevenir problemas
# de conexões que ficam abertas por tempo demais (ex: memory leaks no driver JDBC).
# Valor recomendado: 30 minutos (1800000 ms).
spring.datasource.hikari.max-lifetime=1800000

# Tempo máximo (em milissegundos) que a aplicação esperará por uma conexão do pool.
# Se nenhuma conexão ficar disponível nesse tempo, uma exceção será lançada.
# Ajuda a evitar que a aplicação fique "travada" indefinidamente esperando por uma conexão.
# Valor recomendado: 30 segundos (30000 ms).
spring.datasource.hikari.connection-timeout=30000

# Query de validação
# SQL que o Hikari pode executar para verificar se a conexão ainda é válida
# antes de entregá-la para a aplicação.
# Para Oracle, uma query comum e eficiente é a seguinte:
spring.datasource.hikari.connection-test-query=SELECT 1 FROM DUAL



server.port=8083